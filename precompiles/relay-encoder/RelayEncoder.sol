// SPDX-License-Identifier: GPL-3.0-only
pragma solidity >=0.8.0;

/// @author The Moonbeam Team
/// @title The interface through which solidity contracts will interact with Crowdloan Rewards
/// We follow this same interface including four-byte function selectors, in the precompile that
/// wraps the pallet
interface RelayEncoder {

    function encode_bond(uint256 relay_address, uint256 amount, uint256 reward_destination, uint256 relay_reward_destination) external view returns (bytes memory result);


    function encode_bond_more(uint256 amount) external view returns (bytes memory result);

    function encode_unbond(uint256 amount) external view returns (bytes memory result);

    function encode_withdraw_unbonded(uint32 slashes) external view returns (bytes memory result);

    function encode_validate(uint256 parts_per_billion, bool blocked) external view returns (bytes memory result);

    function encode_nominate(uint256 [] memory nominees) external view returns (bytes memory result);

    function encode_chill() external view returns (bytes memory result);

    function encode_set_payee(uint256 reward_destination, uint256 reward_address) external view returns (bytes memory result);

    function encode_set_controller(uint256 controller) external view returns (bytes memory result);

    function encode_rebond(uint256 amount) external view returns (bytes memory result);

}

// These are the selectors generated by remix following this advice
// https://ethereum.stackexchange.com/a/73405/9963
// Eventually we will probably want a better way of generating these and copying them to Rust

//{ 
//    "f4b913dd": "encode_bond(uint256,uint256,uint256,uint256)",
//    "ea029cbb": "encode_bond_more(uint256)",
//    "bc4b2187": "encode_chill()",
//    "a7cb124b": "encode_nominate(uint256[])",
//    "add6b3bf": "encode_rebond(uint256)",
//    "7a8f48c2": "encode_set_controller(uint256)",
//    "7c85569d": "encode_set_payee(uint256,uint256)",
//    "2cd61217": "encode_unbond(uint256)",
//    "3a0d803a": "encode_validate(uint256,bool)",
//    "2d220331": "encode_withdraw_unbonded(uint32)"
//}
